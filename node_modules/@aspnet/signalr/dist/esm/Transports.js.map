{"version":3,"file":"Transports.js","sourceRoot":"","sources":["../../src/Transports.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { DataReceived, TransportClosed } from \"./Common\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport enum TransportType {\r\n    WebSockets,\r\n    ServerSentEvents,\r\n    LongPolling,\r\n}\r\n\r\nexport const enum TransferMode {\r\n    Text = 1,\r\n    Binary,\r\n}\r\n\r\nexport interface ITransport {\r\n    connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: DataReceived;\r\n    onclose: TransportClosed;\r\n}\r\n\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly logger: ILogger;\r\n    private readonly accessTokenFactory: () => string;\r\n    private webSocket: WebSocket;\r\n\r\n    constructor(accessTokenFactory: () => string, logger: ILogger) {\r\n        this.logger = logger;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n    }\r\n\r\n    public connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode> {\r\n\r\n        return new Promise<TransferMode>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            const token = this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n\r\n            const webSocket = new WebSocket(url);\r\n            if (requestedTransferMode === TransferMode.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (event: Event) => {\r\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\r\n                this.webSocket = webSocket;\r\n                resolve(requestedTransferMode);\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                reject();\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received: ${message.data}`);\r\n                if (this.onreceive) {\r\n                    this.onreceive(message.data);\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // webSocket will be null if the transport did not start successfully\r\n                if (this.onclose && this.webSocket) {\r\n                    if (event.wasClean === false || event.code !== 1000) {\r\n                        this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\r\n                    } else {\r\n                        this.onclose();\r\n                    }\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this.webSocket && this.webSocket.readyState === WebSocket.OPEN) {\r\n            this.webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.webSocket) {\r\n            this.webSocket.close();\r\n            this.webSocket = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string;\r\n    private readonly logger: ILogger;\r\n    private eventSource: EventSource;\r\n    private url: string;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string, logger: ILogger) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n    }\r\n\r\n    public connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode> {\r\n        if (typeof (EventSource) === \"undefined\") {\r\n            Promise.reject(\"EventSource not supported by the browser.\");\r\n        }\r\n\r\n        this.url = url;\r\n        return new Promise<TransferMode>((resolve, reject) => {\r\n            const token = this.accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n\r\n            const eventSource = new EventSource(url);\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this.logger.log(LogLevel.Trace, `(SSE transport) data received: ${e.data}`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            if (this.onclose) {\r\n                                this.onclose(error);\r\n                            }\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                eventSource.onerror = (e: any) => {\r\n                    reject();\r\n\r\n                    // don't report an error if the transport did not start successfully\r\n                    if (this.eventSource && this.onclose) {\r\n                        this.onclose(new Error(e.message || \"Error occurred\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this.logger.log(LogLevel.Information, `SSE connected to ${this.url}`);\r\n                    this.eventSource = eventSource;\r\n                    // SSE is a text protocol\r\n                    resolve(TransferMode.Text);\r\n                };\r\n            } catch (e) {\r\n                return Promise.reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        return send(this.httpClient, this.url, this.accessTokenFactory, data);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this.eventSource) {\r\n            this.eventSource.close();\r\n            this.eventSource = null;\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly httpClient: HttpClient;\r\n    private readonly accessTokenFactory: () => string;\r\n    private readonly logger: ILogger;\r\n\r\n    private url: string;\r\n    private pollXhr: XMLHttpRequest;\r\n    private pollAbort: AbortController;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: () => string, logger: ILogger) {\r\n        this.httpClient = httpClient;\r\n        this.accessTokenFactory = accessTokenFactory || (() => null);\r\n        this.logger = logger;\r\n        this.pollAbort = new AbortController();\r\n    }\r\n\r\n    public connect(url: string, requestedTransferMode: TransferMode, connection: IConnection): Promise<TransferMode> {\r\n        this.url = url;\r\n\r\n        // Set a flag indicating we have inherent keep-alive in this transport.\r\n        connection.features.inherentKeepAlive = true;\r\n\r\n        if (requestedTransferMode === TransferMode.Binary && (typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            // This will work if we fix: https://github.com/aspnet/SignalR/issues/742\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        this.poll(this.url, requestedTransferMode);\r\n        return Promise.resolve(requestedTransferMode);\r\n    }\r\n\r\n    private async poll(url: string, transferMode: TransferMode): Promise<void> {\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this.pollAbort.signal,\r\n            headers: new Map<string, string>(),\r\n            timeout: 120000,\r\n        };\r\n\r\n        if (transferMode === TransferMode.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = this.accessTokenFactory();\r\n        if (token) {\r\n            pollOptions.headers.set(\"Authorization\", `Bearer ${token}`);\r\n        }\r\n\r\n        while (!this.pollAbort.signal.aborted) {\r\n            try {\r\n                const pollUrl = `${url}&_=${Date.now()}`;\r\n                this.logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}`);\r\n                const response = await this.httpClient.get(pollUrl, pollOptions);\r\n                if (response.statusCode === 204) {\r\n                    this.logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server\");\r\n\r\n                    // Poll terminated by server\r\n                    if (this.onclose) {\r\n                        this.onclose();\r\n                    }\r\n                    this.pollAbort.abort();\r\n                } else if (response.statusCode !== 200) {\r\n                    this.logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}`);\r\n\r\n                    // Unexpected status code\r\n                    if (this.onclose) {\r\n                        this.onclose(new HttpError(response.statusText, response.statusCode));\r\n                    }\r\n                    this.pollAbort.abort();\r\n                } else {\r\n                    // Process the response\r\n                    if (response.content) {\r\n                        this.logger.log(LogLevel.Trace, `(LongPolling transport) data received: ${response.content}`);\r\n                        if (this.onreceive) {\r\n                            this.onreceive(response.content);\r\n                        }\r\n                    } else {\r\n                        // This is another way timeout manifest.\r\n                        this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                if (e instanceof TimeoutError) {\r\n                    // Ignore timeouts and reissue the poll.\r\n                    this.logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                } else {\r\n                    // Close the connection with the error as the result.\r\n                    if (this.onclose) {\r\n                        this.onclose(e);\r\n                    }\r\n                    this.pollAbort.abort();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        return send(this.httpClient, this.url, this.accessTokenFactory, data);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.pollAbort.abort();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onreceive: DataReceived;\r\n    public onclose: TransportClosed;\r\n}\r\n\r\nasync function send(httpClient: HttpClient, url: string, accessTokenFactory: () => string, content: string | ArrayBuffer): Promise<void> {\r\n    let headers;\r\n    const token = accessTokenFactory();\r\n    if (token) {\r\n        headers = new Map<string, string>();\r\n        headers.set(\"Authorization\", `Bearer ${accessTokenFactory()}`);\r\n    }\r\n\r\n    await httpClient.post(url, {\r\n        content,\r\n        headers,\r\n    });\r\n}\r\n"]}