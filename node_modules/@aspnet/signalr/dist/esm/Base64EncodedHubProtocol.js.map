{"version":3,"file":"Base64EncodedHubProtocol.js","sourceRoot":"","sources":["../../src/Base64EncodedHubProtocol.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,+GAA+G;AAI/G,MAAM;IAGF,YAAY,QAAsB;QAC9B,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;QAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QACtC,IAAI,CAAC,IAAI,eAAoB,CAAC;IAClC,CAAC;IAKM,aAAa,CAAC,KAAU;QAC3B,+CAA+C;QAC/C,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAChD,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACxC,CAAC;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACvC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,oBAAoB,MAAM,GAAG,CAAC,CAAC;QACnD,CAAC;QAED,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACzC,yDAAyD;QACzD,EAAE,CAAC,CAAC,WAAW,KAAK,KAAK,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,cAAc,GAAG,KAAK,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAElE,iGAAiG;QACjG,mBAAmB;QACnB,MAAM,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;QAC/B,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;QACzC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACtC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;IAEM,YAAY,CAAC,OAAmB;QACnC,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;QAC3E,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,CAAC,IAAI,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QACD,iGAAiG;QACjG,mBAAmB;QACnB,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAE/B,MAAM,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,cAAc,GAAG,CAAC;IACpE,CAAC;CACJ","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { HubMessage, IHubProtocol, ProtocolType } from \"./IHubProtocol\";\r\n\r\nexport class Base64EncodedHubProtocol implements IHubProtocol {\r\n    private wrappedProtocol: IHubProtocol;\r\n\r\n    constructor(protocol: IHubProtocol) {\r\n        this.wrappedProtocol = protocol;\r\n        this.name = this.wrappedProtocol.name;\r\n        this.type = ProtocolType.Text;\r\n    }\r\n\r\n    public readonly name: string;\r\n    public readonly type: ProtocolType;\r\n\r\n    public parseMessages(input: any): HubMessage[] {\r\n        // The format of the message is `size:message;`\r\n        const pos = input.indexOf(\":\");\r\n        if (pos === -1 || input[input.length - 1] !== \";\") {\r\n            throw new Error(\"Invalid payload.\");\r\n        }\r\n\r\n        const lenStr = input.substring(0, pos);\r\n        if (!/^[0-9]+$/.test(lenStr)) {\r\n            throw new Error(`Invalid length: '${lenStr}'`);\r\n        }\r\n\r\n        const messageSize = parseInt(lenStr, 10);\r\n        // 2 accounts for ':' after message size and trailing ';'\r\n        if (messageSize !== input.length - pos - 2) {\r\n            throw new Error(\"Invalid message size.\");\r\n        }\r\n\r\n        const encodedMessage = input.substring(pos + 1, input.length - 1);\r\n\r\n        // atob/btoa are browsers APIs but they can be polyfilled. If this becomes problematic we can use\r\n        // base64-js module\r\n        const s = atob(encodedMessage);\r\n        const payload = new Uint8Array(s.length);\r\n        for (let i = 0; i < payload.length; i++) {\r\n            payload[i] = s.charCodeAt(i);\r\n        }\r\n        return this.wrappedProtocol.parseMessages(payload.buffer);\r\n    }\r\n\r\n    public writeMessage(message: HubMessage): any {\r\n        const payload = new Uint8Array(this.wrappedProtocol.writeMessage(message));\r\n        let s = \"\";\r\n        for (let i = 0; i < payload.byteLength; i++) {\r\n            s += String.fromCharCode(payload[i]);\r\n        }\r\n        // atob/btoa are browsers APIs but they can be polyfilled. If this becomes problematic we can use\r\n        // base64-js module\r\n        const encodedMessage = btoa(s);\r\n\r\n        return `${encodedMessage.length.toString()}:${encodedMessage};`;\r\n    }\r\n}\r\n"]}