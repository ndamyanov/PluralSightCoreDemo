{"version":3,"file":"HubConnection.js","sourceRoot":"","sources":["../../src/HubConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { Base64EncodedHubProtocol } from \"./Base64EncodedHubProtocol\";\r\nimport { ConnectionClosed } from \"./Common\";\r\nimport { HttpConnection, IHttpConnectionOptions } from \"./HttpConnection\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, NegotiationMessage, ProtocolType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { ConsoleLogger, LoggerFactory, NullLogger } from \"./Loggers\";\r\nimport { Observable, Subject } from \"./Observable\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { TransferMode, TransportType } from \"./Transports\";\r\n\r\nexport { JsonHubProtocol };\r\n\r\nexport interface IHubConnectionOptions extends IHttpConnectionOptions {\r\n    protocol?: IHubProtocol;\r\n    timeoutInMilliseconds?: number;\r\n}\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\n\r\nexport class HubConnection {\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private callbacks: Map<string, (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => void>;\r\n    private methods: Map<string, Array<(...args: any[]) => void>>;\r\n    private id: number;\r\n    private closedCallbacks: ConnectionClosed[];\r\n    private timeoutHandle: NodeJS.Timer;\r\n    private timeoutInMilliseconds: number;\r\n\r\n    constructor(url: string, options?: IHubConnectionOptions);\r\n    constructor(connection: IConnection, options?: IHubConnectionOptions);\r\n    constructor(urlOrConnection: string | IConnection, options: IHubConnectionOptions = {}) {\r\n        options = options || {};\r\n\r\n        this.timeoutInMilliseconds = options.timeoutInMilliseconds || DEFAULT_TIMEOUT_IN_MS;\r\n\r\n        if (typeof urlOrConnection === \"string\") {\r\n            this.connection = new HttpConnection(urlOrConnection, options);\r\n        } else {\r\n            this.connection = urlOrConnection;\r\n        }\r\n\r\n        this.logger = LoggerFactory.createLogger(options.logger);\r\n\r\n        this.protocol = options.protocol || new JsonHubProtocol();\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = new Map<string, (invocationEvent: HubMessage, error?: Error) => void>();\r\n        this.methods = new Map<string, Array<(...args: any[]) => void>>();\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        if (this.timeoutHandle !== undefined) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = this.protocol.parseMessages(data);\r\n\r\n        for (const message of messages) {\r\n            switch (message.type) {\r\n                case MessageType.Invocation:\r\n                    this.invokeClientMethod(message);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                case MessageType.Completion:\r\n                    const callback = this.callbacks.get(message.invocationId);\r\n                    if (callback != null) {\r\n                        if (message.type === MessageType.Completion) {\r\n                            this.callbacks.delete(message.invocationId);\r\n                        }\r\n                        callback(message);\r\n                    }\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Don't care about pings\r\n                    break;\r\n                default:\r\n                    this.logger.log(LogLevel.Warning, \"Invalid message type: \" + data);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    private configureTimeout() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.timeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this.methods.get(invocationMessage.target.toLowerCase());\r\n        if (methods) {\r\n            methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this.logger.log(LogLevel.Error, message);\r\n                this.connection.stop(new Error(message));\r\n            }\r\n        } else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.callbacks.forEach((callback) => {\r\n            callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n        });\r\n        this.callbacks.clear();\r\n\r\n        this.closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n\r\n        this.cleanupTimeout();\r\n    }\r\n\r\n    public async start(): Promise<void> {\r\n        const requestedTransferMode =\r\n            (this.protocol.type === ProtocolType.Binary)\r\n                ? TransferMode.Binary\r\n                : TransferMode.Text;\r\n\r\n        this.connection.features.transferMode = requestedTransferMode;\r\n        await this.connection.start();\r\n        const actualTransferMode = this.connection.features.transferMode;\r\n\r\n        await this.connection.send(\r\n            TextMessageFormat.write(\r\n                JSON.stringify({ protocol: this.protocol.name } as NegotiationMessage)));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        if (requestedTransferMode === TransferMode.Binary && actualTransferMode === TransferMode.Text) {\r\n            this.protocol = new Base64EncodedHubProtocol(this.protocol);\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    public stream<T>(methodName: string, ...args: any[]): Observable<T> {\r\n        const invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        const subject = new Subject<T>(() => {\r\n            const cancelInvocation: CancelInvocationMessage = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            const cancelMessage: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            this.callbacks.delete(invocationDescriptor.invocationId);\r\n\r\n            return this.connection.send(cancelMessage);\r\n        });\r\n\r\n        this.callbacks.set(invocationDescriptor.invocationId, (invocationEvent: CompletionMessage | StreamItemMessage, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                if (invocationEvent.error) {\r\n                    subject.error(new Error(invocationEvent.error));\r\n                } else {\r\n                    subject.complete();\r\n                }\r\n            } else {\r\n                subject.next((invocationEvent.item) as T);\r\n            }\r\n        });\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.connection.send(message)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                this.callbacks.delete(invocationDescriptor.invocationId);\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    public invoke(methodName: string, ...args: any[]): Promise<any> {\r\n        const invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            this.callbacks.set(invocationDescriptor.invocationId, (invocationEvent: StreamItemMessage | CompletionMessage, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    const completionMessage = invocationEvent as CompletionMessage;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    } else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                } else {\r\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                }\r\n            });\r\n\r\n            const message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.connection.send(message)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    this.callbacks.delete(invocationDescriptor.invocationId);\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    public on(methodName: string, method: (...args: any[]) => void) {\r\n        if (!methodName || !method) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods.has(methodName)) {\r\n            this.methods.set(methodName, []);\r\n        }\r\n\r\n        this.methods.get(methodName).push(method);\r\n    }\r\n\r\n    public off(methodName: string, method: (...args: any[]) => void) {\r\n        if (!methodName || !method) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this.methods.get(methodName);\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        const removeIdx = handlers.indexOf(method);\r\n        if (removeIdx !== -1) {\r\n            handlers.splice(removeIdx, 1);\r\n        }\r\n    }\r\n\r\n    public onclose(callback: ConnectionClosed) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                arguments: args,\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        } else {\r\n            const id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                arguments: args,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                type: MessageType.Invocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        const id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            arguments: args,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            type: MessageType.StreamInvocation,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n}\r\n"]}